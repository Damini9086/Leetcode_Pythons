class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = [] #to keep a track of opening brackets
        
        mapping = {")":"(", "}":"{", "]":"["}
        
        #for every bracket in the expression:
        for char in s:
            #if char is a closing bracket
            if char in mapping:
                #pop the topmost element from the stack if non-empty
                #otherwise assign a dummy value # to the top most element
                top_element = stack.pop() if stack else '#'
                if mapping[char]!=top_element:
                    return False
            else:
                stack.append(char)
        #if the stack is empty , its a valid 
        return not stack
